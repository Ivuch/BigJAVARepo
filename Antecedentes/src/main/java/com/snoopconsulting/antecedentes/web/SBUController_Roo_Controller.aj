// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.snoopconsulting.antecedentes.web;

import com.snoopconsulting.antecedentes.domain.SBU;
import com.snoopconsulting.antecedentes.repository.jpa.SBURepository;
import com.snoopconsulting.antecedentes.web.SBUController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SBUController_Roo_Controller {
    
    @Autowired
    SBURepository SBUController.sBURepository;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SBUController.create(@Valid SBU SBU_, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, SBU_);
            return "sbus/create";
        }
        uiModel.asMap().clear();
        sBURepository.save(SBU_);
        return "redirect:/sbus/" + encodeUrlPathSegment(SBU_.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SBUController.createForm(Model uiModel) {
        populateEditForm(uiModel, new SBU());
        return "sbus/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String SBUController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("sbu_", sBURepository.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "sbus/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SBUController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("sbus", sBURepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) sBURepository.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("sbus", sBURepository.findAll());
        }
        return "sbus/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SBUController.update(@Valid SBU SBU_, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, SBU_);
            return "sbus/update";
        }
        uiModel.asMap().clear();
        sBURepository.save(SBU_);
        return "redirect:/sbus/" + encodeUrlPathSegment(SBU_.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String SBUController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, sBURepository.findOne(id));
        return "sbus/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String SBUController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        SBU SBU_ = sBURepository.findOne(id);
        sBURepository.delete(SBU_);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/sbus";
    }
    
    void SBUController.populateEditForm(Model uiModel, SBU SBU_) {
        uiModel.addAttribute("SBU_", SBU_);
    }
    
    String SBUController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
