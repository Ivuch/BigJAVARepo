// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.snoopconsulting.antecedentes.domain;

import com.snoopconsulting.antecedentes.domain.EstadoValidacion;
import com.snoopconsulting.antecedentes.domain.UsuarioDataOnDemand;
import com.snoopconsulting.antecedentes.domain.Validacion;
import com.snoopconsulting.antecedentes.domain.ValidacionDataOnDemand;
import com.snoopconsulting.antecedentes.repository.jpa.ValidacionRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ValidacionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ValidacionDataOnDemand: @Component;
    
    private Random ValidacionDataOnDemand.rnd = new SecureRandom();
    
    private List<Validacion> ValidacionDataOnDemand.data;
    
    @Autowired
    UsuarioDataOnDemand ValidacionDataOnDemand.usuarioDataOnDemand;
    
    @Autowired
    ValidacionRepository ValidacionDataOnDemand.validacionRepository;
    
    public Validacion ValidacionDataOnDemand.getNewTransientValidacion(int index) {
        Validacion obj = new Validacion();
        setEstado(obj, index);
        setFechaValidacion(obj, index);
        setMensaje(obj, index);
        return obj;
    }
    
    public void ValidacionDataOnDemand.setEstado(Validacion obj, int index) {
        EstadoValidacion estado = EstadoValidacion.class.getEnumConstants()[0];
        obj.setEstado(estado);
    }
    
    public void ValidacionDataOnDemand.setFechaValidacion(Validacion obj, int index) {
        Date fechaValidacion = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaValidacion(fechaValidacion);
    }
    
    public void ValidacionDataOnDemand.setMensaje(Validacion obj, int index) {
        String mensaje = "mensaje_" + index;
        if (mensaje.length() > 10000) {
            mensaje = mensaje.substring(0, 10000);
        }
        obj.setMensaje(mensaje);
    }
    
    public Validacion ValidacionDataOnDemand.getSpecificValidacion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Validacion obj = data.get(index);
        Long id = obj.getId();
        return validacionRepository.findOne(id);
    }
    
    public Validacion ValidacionDataOnDemand.getRandomValidacion() {
        init();
        Validacion obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return validacionRepository.findOne(id);
    }
    
    public boolean ValidacionDataOnDemand.modifyValidacion(Validacion obj) {
        return false;
    }
    
    public void ValidacionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = validacionRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Validacion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Validacion>();
        for (int i = 0; i < 10; i++) {
            Validacion obj = getNewTransientValidacion(i);
            try {
                validacionRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            validacionRepository.flush();
            data.add(obj);
        }
    }
    
}
